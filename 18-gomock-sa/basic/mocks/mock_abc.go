// Code generated by MockGen. DO NOT EDIT.
// Source: abc.go
//
// Generated by this command:
//
//	mockgen -source=abc.go -destination=mocks/mock_abc.go -package=mocksn
//

// Package mocksn is a generated GoMock package.
package mocksn

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockABCInterface is a mock of ABCInterface interface.
type MockABCInterface struct {
	ctrl     *gomock.Controller
	recorder *MockABCInterfaceMockRecorder
	isgomock struct{}
}

// MockABCInterfaceMockRecorder is the mock recorder for MockABCInterface.
type MockABCInterfaceMockRecorder struct {
	mock *MockABCInterface
}

// NewMockABCInterface creates a new mock instance.
func NewMockABCInterface(ctrl *gomock.Controller) *MockABCInterface {
	mock := &MockABCInterface{ctrl: ctrl}
	mock.recorder = &MockABCInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockABCInterface) EXPECT() *MockABCInterfaceMockRecorder {
	return m.recorder
}

// DoSomething mocks base method.
func (m *MockABCInterface) DoSomething(x int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSomething", x)
	ret0, _ := ret[0].(string)
	return ret0
}

// DoSomething indicates an expected call of DoSomething.
func (mr *MockABCInterfaceMockRecorder) DoSomething(x any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSomething", reflect.TypeOf((*MockABCInterface)(nil).DoSomething), x)
}

// DoSomething2 mocks base method.
func (m *MockABCInterface) DoSomething2(x string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoSomething2", x)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoSomething2 indicates an expected call of DoSomething2.
func (mr *MockABCInterfaceMockRecorder) DoSomething2(x any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoSomething2", reflect.TypeOf((*MockABCInterface)(nil).DoSomething2), x)
}
